{
  "permissions": {
    "allow": [
      "Bash(npm install dotenv nodemailer)",
      "Bash(node:*)",
      "Bash(timeout:*)",
      "Bash(DEBUG=true node server.js --force-window)",
      "Bash(DEBUG=true node server.js --help)",
      "Bash(DEBUG=true node test-soc.js)",
      "Bash(del test-soc.js)",
      "Bash(npx playwright test:*)",
      "Bash(DEBUG=true node -e \"const SMA = require(''./sma.js''); SMA.getAllInverterData().then(console.log).catch(console.error)\")",
      "Bash(npm run:*)",
      "WebFetch(domain:www.sunnyportal.com)",
      "Bash(DEBUG=true node -e \"const SMA = require(''./sma.js''); SMA.getForecastedGeneration().then(console.log).catch(console.error)\")",
      "Bash(DEBUG=true node server.js --once --force-window)",
      "Bash(DEBUG=true node -e \"\nconst Octopus = require(''./octopus.js'');\n// Test with mock forecast data - 10 kWh expected generation\n// SOC=25%, target=30%, but with 10kWh forecast (~32% of 31.2kWh battery)\n// Should reduce target to 30-32=-2%, so min 0% = should charge\nOctopus.shouldCharge(25, null, false, true, 10).then(result => {\n  console.log(''\\n=== SIMULATION WITH 10 kWh FORECAST ==='');\n  console.log(''SOC: 25%, Original Target: 30%'');\n  console.log(''Forecast: 10 kWh (should reduce target significantly)'');\n  console.log(''Result:'', JSON.stringify(result, null, 2));\n}).catch(console.error);\n\")",
      "WebFetch(domain:login.sma.energy)",
      "Bash(DEBUG=true node -e \"const SMA = require(''./sma.js''); SMA.getForecastedGeneration().then(console.log).catch(console.error)\")",
      "Bash(DEBUG=true node -e \"const SMA = require(''./sma.js''); SMA.getForecastedGeneration().then(result => { console.log(''\\n🌞 FORECAST RESULT:'', result, ''kWh''); }).catch(console.error)\")",
      "Bash(DEBUG=true node -e \"\nconst Octopus = require(''./octopus.js'');\n// Test with real forecast data: 3 kWh\n// SOC=25%, target=30%, with 3kWh forecast (~10% of 31.2kWh battery)\n// Should reduce target from 30% to ~20%\nOctopus.shouldCharge(25, null, false, true, 3).then(result => {\n  console.log(''\\n=== REAL FORECAST TEST ==='');\n  console.log(''SOC: 25%, Original Target: 30%'');\n  console.log(''Real Forecast: 3 kWh from Sunny Portal'');\n  console.log(''Result:'', JSON.stringify(result, null, 2));\n}).catch(console.error);\n\")",
      "Bash(DEBUG=true node -e \"const SMA = require(''./sma.js''); SMA.getAllInverterData().then(console.log).catch(console.error)\")",
      "Bash(DEBUG=true node -e \"const SMA = require(''./sma.js''); SMA.getAllInverterData().then(console.log).catch(console.error)\")",
      "Bash(DEBUG=true node -e \"const SMA = require(''./sma.js''); SMA.getAllInverterData().then(console.log).catch(console.error)\")",
      "Bash(DEBUG=true node -e \"const SMA = require(''./sma.js''); SMA.getAllInverterData().then(result => { console.log(''\\n🌟 FINAL HYBRID RESULT:''); console.log(''═''.repeat(40)); console.log(''SOC:'', result.stateOfCharge + ''%''); console.log(''Capacity:'', result.capacity, ''kWh''); console.log(''PV Generation:'', result.pvGeneration, ''W''); console.log(''Consumption:'', result.consumption, ''W''); console.log(''Purchased:'', result.purchasedElectricity, ''W''); console.log(''Battery Charging:'', result.batteryCharging, ''W''); }).catch(console.error)\")",
      "Bash(DEBUG=true node -e \"const SMA = require(''./sma.js''); SMA.getAllInverterData().then(result => { console.log(''\\n🌟 FINAL HYBRID RESULT WITH RETRIES:''); console.log(''═''.repeat(50)); console.log(''SOC:'', result.stateOfCharge + ''%''); console.log(''Capacity:'', result.capacity, ''kWh''); console.log(''PV Generation:'', result.pvGeneration, ''W''); console.log(''Consumption:'', result.consumption, ''W''); console.log(''Purchased:'', result.purchasedElectricity, ''W''); console.log(''Battery Charging:'', result.batteryCharging, ''W''); }).catch(console.error)\")",
      "Bash(DEBUG=true node server.js --once)",
      "WebSearch",
      "WebFetch(domain:files.sma.de)",
      "WebFetch(domain:manuals.sma.de)",
      "Bash(pkill:*)",
      "Bash(DEBUG=true node -e \"\nconst SMA = require(''./sma.js'');\nSMA.getAllInverterData().then(result => {\n  console.log(''\\n🌟 TESTING IMPROVED FORCE CHARGE DETECTION:'');\n  console.log(''═''.repeat(50));\n  console.log(''SOC:'', result.stateOfCharge + ''%'');\n  console.log(''Force Charging Windows:'', result.forceChargingWindows);\n  console.log(''Is Charging (final state):'', result.isCharging);\n  console.log(''Battery Charging Power:'', result.batteryCharging, ''W'');\n}).catch(console.error)\n\")",
      "Bash(DEBUG=true npx playwright test getForecastData.test.js --timeout=60000)",
      "Bash(for func in \"getStateOfCharge\" \"getCurrentConsumption\" \"getBatteryCapacity\")",
      "Bash(do echo \"=== Checking $func ===\")",
      "Bash(rg:*)",
      "Bash(done)",
      "Bash(for func in \"setCharging\")",
      "Bash(DEBUG=true node -e \"const SMA = require(''./sma.js''); SMA.getAllInverterData().then(result => { console.log(''Result:'', result); }).catch(error => { console.error(''Error:'', error.message); })\")",
      "Bash(DEBUG=true timeout 60s node -e \"const SMA = require(''./sma.js''); SMA.getAllInverterData().then(result => { console.log(''\\n🎉 Success:'', JSON.stringify(result, null, 2)); }).catch(error => { console.error(''\\n❌ Error:'', error.message); })\")",
      "Bash(DEBUG=true node -e \"const SMA = require(''./sma.js''); SMA.getAllInverterData().then(result => { console.log(''\\n🎉 SUCCESS! SOC:'', result.stateOfCharge, ''%, Capacity:'', result.capacity, ''kWh''); process.exit(0); }).catch(error => { console.error(''\\n❌ FAILED:'', error.message); process.exit(1); })\")",
      "Bash(DEBUG=true node -e \"const SMA = require(''./sma.js''); SMA.getAllInverterData().then(result => { console.log(''\\n🎉 DONE''); process.exit(0); }).catch(error => { console.error(''\\n❌ ERROR:'', error.message); process.exit(1); })\")",
      "Bash(DEBUG=true node -e \"const SMA = require(''./sma.js''); SMA.getAllInverterData().then(result => { console.log(''\\n🎉 RESULT: SOC='' + result.stateOfCharge + ''%, Capacity='' + result.capacity + ''kWh''); process.exit(0); }).catch(error => { console.error(''\\n❌ FAILED:'', error.message); process.exit(1); })\")",
      "Bash(DEBUG=true node -e \"const SMA = require(''./sma.js''); SMA.getAllInverterData().then(result => { console.log(''\\n🎉 SUCCESS! SOC:'', result.stateOfCharge, ''%, Capacity:'', result.capacity, ''kWh''); process.exit(0); }).catch(error => { console.error(''\\n❌ FAILED:'', error.message); process.exit(1); })\")",
      "Bash(DEBUG=true node -e \"const SMA = require(''./sma.js''); SMA.getAllInverterData().then(result => { console.log(''\\n🎉 FINAL RESULT:''); console.log(''SOC:'', result.stateOfCharge + ''%''); console.log(''Capacity:'', result.capacity, ''kWh''); console.log(''PV Generation:'', result.pvGeneration, ''W''); console.log(''Consumption:'', result.consumption, ''W''); console.log(''Purchased:'', result.purchasedElectricity, ''W''); console.log(''Battery Charging:'', result.batteryCharging, ''W''); console.log(''Force Charging:'', result.isCharging ? ''ON'' : ''OFF''); }).catch(error => { console.error(''\\n❌ FAILED:'', error.message); })\")",
      "Bash(git add:*)"
    ],
    "deny": [],
    "ask": []
  }
}